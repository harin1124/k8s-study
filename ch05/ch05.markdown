# 볼륨, 마운트, 클레임을 이용한 데이터 퍼시스턴시

## 쿠버네티스에서 컨테이너 파일 시스템이 구축되는 과정
- 컨테이너 이미지가 파일 시스템의 초기 내용을 제공하고,<br>
  이 위에 컨테이너가 <span style="color:#DF5452">**기록 가능한 레이어(`writable layer`)**</span>가 얹어진다.
  - 이미지에 들어 있던 파일을 수정 또는 새로운 파일 기록하는 작업이 해당 레이어에서 일어난다.
  - 도커 이미지는 읽기 전용으로, 이미지에 있던 파일을 수정하는 것은<br>
    기록 가능 레이어에서 <span style="color:#DF5452">**해당 파일의 사본을 수정**</span>하는 것이다.
- 컨테이너의 가상 파일 시스템 구성에 외부 스토리지 참조하는 볼륨을 포함시킬 수 있다.
- 컨테이너에서 동작하는 애플리케이션에는 이런 레이어 구조가 드러나지 않고, <span style="color:#DF5452">**읽기 쓰기가 가능한 하나의 파일 시스템**</span>으로만 보인다.
- 만약 애플리케이션이 데이터를 기록할 필요가 있다면, 데이터 기록이 어떻게 이루어지는지 이해하고 그에 맞춰 파드를 정의해야 한다.<br>
  그렇지 않으면 파드가 재시작 하거나 새 파드로 대체될 때 데이터 손실이 발생한다.

### 기록 가능 레이어에 기록한 데이터 유실 시점
- 컨테이너 속에서 동작하던 애플리케이션이 문제가 발생하여 컨테이너가 종료되면, 대체할 새로운 파드가 생성된다.<br>
  새로운 컨테이너는 컨테이너 이미지의 내용과 <span style="color:#DF5452">**초기 상태의 기록 가능 레이어**</span>로 구성된 파일 시스템을 가진다.<br>
  즉, <span style="color:#DF5452">**기존 컨테이너가 기록 가능 레이어에 기록한 데이터는 유실**</span>된다.
<img src="./images/containerFileSystemDiagram.png" style="width:50%"/>

---

## 볼륨
- 컨테이너 파일 시스템은 컨피그맵이나 비밀값 등을 <span style="color:#DF5452">**특정 경로에 마운트하는 방식**</span>으로 확장할 수 있다.
- 볼륨도 컨테이너 파일 시스템을 구성하는 수단 중 하나로, 볼륨은 파드 수준에서 정의되고 읽기 전용 또는 쓰기 가능으로 설정할 수 있다.<br>
  또한 다른 유형의 스토리지로 백업될 수도 있다.<br>
  (ex. 파드가 실행 중인 노드의 디스크에서 네트워크 파일 시스템으로 데이터 백업)

---

## 공디렉터리(EmptyDir)

### 특징
- 컨테이너 안에서 빈 디렉터리로 초기화되는 유형이다.
- 파드 수준의 스토리지로, 이미지나 컨테이너 레이어에 속하지 않는다.
- 파드와 생애 주기를 함께 하여, 파드가 대체되어 새 파드를 만들면 처음 상태인 빈 디렉토리가 된다.

### 장점
- 공디렉터리 볼륨에 저장된 데이터는 파드가 재시작되더라도 유지된다.
- 애플리케이션이 죽더라도 대체 컨테이너가 데이터를 이어 받아 캐시의 효과를 볼 수 있으므로, <span style="color:#DF5452">**로컬 캐시**</span>에 적합하다.<br>

### 단점
- <span style="color:#DF5452">**파드가 재시작할 경우 스토리지가 유지되지만, 새로운 파드일 경우에는 스토리가 유실**</span>된다.

### 공디렉터리 정의 방법
- `spec.template.spec.containers[0].volumeMounts[1]`와 `spec.template.spec.volumes[1]`에서 정의하고 마운트하고 있다.
```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pi-proxy
spec:
  selector:
    matchLabels:
      app: pi-proxy
  template:
    metadata:
      labels:
        app: pi-proxy
    spec:
      containers:
        - image: nginx:1.17-alpine
          name: http
          ports:
            - containerPort: 80
              name: http
          volumeMounts:
            - name: config
              mountPath: "/etc/nginx/"
              readOnly: true
            - name: cache-volume
              mountPath: /data/nginx/cache # 아래 정의한 cache-volume 을 해당 경로에 마운트
      volumes:
        - name: config
          configMap:
            name: pi-proxy-configmap
        - name: cache-volume
          emptyDir: {} # 볼륨의 유형은 공디렉토리 정의
```

---

## 호스트경로(HostPath) 볼륨

### 특징
- 파드에 정의되며 컨테이너 파일 시스템에 마운트되는 형태로 쓰인다.<br>
  컨테이너가 마운트 경로 디렉터리에 데이터를 기록하면, <span style="color:#DF5452">**실제 데이터는 노드의 디스크에 기록**</span>된다.
- 파드가 교체되어도 데이터를 유지하지만, <span style="color:#DF5452">**파드가 같은 노드에 배치되었을 때만 데이터를 유지**</span>한다.
- 예전에 개발된 애플리케이션 중 실행 중 노드의 특정 경로에 접근해야 하는 경우와 같은 때에 사용한다.
  <img src="./images/containerFileSystemHostPathDiagram.png"/>

### 장점
- 공디렉터리와 다르게 파드가 교체되어도 데이터를 유지한다.
- 유상태(stateful) 애플리케이션을 쿠버네티스로 처음 도입할 때 유리하다.
- 사용하기 쉽고, 모든 클러스터에서 동일하게 동작하는 것이 장점이다.

### 단점
- 쿠버네티스가 클러스터의 모든 노드에 동일한 데이터의 복제본을 만들어주지는 못한다.
- 노드가 두 개 이상인 클러스터에서 보안 취약점을 드러낸다.<br>
  - 노드가 고장을 일으키면 파드가 실행되지 않고, 애플리케이션이 제대로 동작할 수 없게 된다.
  - 만약 아래와 같이 파드 정의를 할 경우, <span style="color:#DF5452">**노드의 파일 시스템 전체에 파드 컨테이너가 접근**</span>할 수 있게 된다.<br>
    이는 만약 해당 애플리케이션이 침투 당할 경우, 공격자가 컨테이너에서 명령을 실행하면 노드의 디스크 전체를 장악당할 수 있다.
    ```yaml
    spec:
      containers:
        - name: sleep
          image: kiamol/ch03-sleep
          volumeMounts:
            - name: node-root
              mountPath: /node-root
      volumes:
        - name: node-root
          hostPath:
            path: /
            type: Directory
    ```
  - 이러한 단점은 <span style="color:#DF5452">**볼륨의 하위 디렉터리를 마운트**</span>하여 노드의 파일 시스템을 필요 이상으로 노출하지 않는 식으로 안전하게 사용하면 된다.

### 호스트경로 볼륨 정의 방법
- 다음과 같이 정의하면 프록시 컨테이너가 `/data/nginx/cache` 디렉터리에 캐시 파일을 기록 시,<br>
  데이터가 실제 기록되는 곳은 노드의 파일 시스템 중 `/volumes/nginx/cache` 디렉터리이다.
```yaml
# 중략
spec:
  containers:
    - name: nginx
      image: nginx:1.17-alpine
      ports:
        - containerPort: 80
          name: http
      volumeMounts:
        - name: config
          mountPath: "/etc/nginx/"
          readOnly: true
        - name: cache-volume
          mountPath: /data/nginx/cache # 프록시의 캐시 저장 경로
  volumes:
    - name: config
      configMap:
        name: pi-proxy-configmap
    - name: cache-volume
      hostPath:                      # 마치 볼륨의 타입을 지정하는 것으로, 노드의 디렉터리를 사용하게 된다.
        path: /volumes/nginx/cache   # 사용할 노드의 디렉터리 경로
        type: DirectoryOrCreate      # 해당 디렉터리가 존재하지 않으면 생성하도록 명시
```

### 안전하게 노드의 하위 디렉터리로 호스트볼륨 정의 방법
```yaml
# 중략
spec:
  containers:
    - name: sleep
      image: kiamol/ch03-sleep
      volumeMounts:
        - name: node-root           # 마운트할 볼륨명
          mountPath: /pod-logs      # 마운트 대상 컨테이너 경로
          subPath: var/log/pods     # 마운트 대상 볼륨 내 경로
        - name: node-root
          mountPath: /container-logs
          subPath: var/log/containers
  volumes:
    - name: node-root
      hostPath:
        path: /
        type: Directory
```

---

## 영구볼륨(PersistentVolume, PV)
- 스토리지 계층의 추상으로, <span style="color:#DF5452">**사용 가능한 스토리지의 조각**</span>을 정의한 쿠버네티스 리소스이다.
- 클러스터 관리자가 만들고, 각각의 영구볼륨에는 이를 구현하는 스토리지 시스템에 대한 볼륨 정의가 들어 있다.
- 파드가 영구볼륨을 직접 사용할 수 없다.

### 영구볼륨 정의
```yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv01
  namespace: test
spec:
  capacity:
    storage: 50Mi
  accessModes:
    - ReadWriteOnce
  nfs:
    server: nfs.my.network
    path: "/kubernetes-volumes"
```

## 영구볼륨클레임(PersistentVolumeClaim, PVC)
- 파드가 사용하는 스토리지의 추상으로, <span style="color:#DF5452">**애플리케이션에서 사용할 스토리지를 요청**</span>하는 역할을 한다.
- 쿠버네티스에서 영구볼륨클레임은 요구 조건이 일치하는 영구볼륨과 함께 쓰인다.
- 영구볼륨클레임 정의에 접근 유형과 스토리지 용량, 스토리지 유형을 지정한다.
- 스토리지 유형을 지정하지 않으면 쿠버네티스가 현존하는 영구볼륨 중 요구 사항과 일치하는 것을 찾아준다.
- <span style="color:#DF5452">**일치하는 영구볼륨이 있다면, 영구볼륨클레임은 이 영구볼륨과 연결**</span>된다.<br>
  <span style="color:#DF5452">**영구볼륨과 영구볼륨클레임의 관계는 일대일**</span>이고, 영구볼륨클레임과 연결된 영구볼륨은 다른 영구볼륨클레임과 추가로 연결될 수 없다.
- 파드가 영구볼륨클레임을 사용하려면 클레임이 먼저 영구볼륨과 연결되어야 한다.<br>
  만약 볼륨과 연결되지 않은 클레임을 참조하는 파드를 배치할 경우, 파드도 보류 상태로 남아 애플리케이션이 정상적으로 시작하지 못한다.

### 영구볼륨클레임 정의
```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: test
spec:
  accessModes:         # 접근 유형
    - ReadWriteOnce
  resources:
    requests:
      storage: 40Mi    # 요청하는 스토리지 용량
  storageClassName: "" # 스토리지 유형 : 현재 지정하지 않는 상태다.
```

### 영구볼륨과 영구볼륨클레임이 서로 연결된 경우
```shell
# input
kubectl get pv

# output
# STATUS가 Bound인 것은 현재 사용 중인 것이다.
# CLAIM 의 test/postgres-pvc가 연결된 [네임스페이스]/[영구볼륨클레임명]이다.
NAME   CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM               STORAGECLASS   REASON   AGE
pv01   50Mi       RWO            Retain           Bound    test/postgres-pvc                           10m
```

---

## 동적 볼륨 프로비저닝
- 영구볼륨클레임만 생성하면 그에 맞는 <span style="color:#DF5452">**영구볼륨을 클러스터에서 동적으로 생성**</span>해주는 방식이다.
- 스토리지 유형을 따로 지정하지 않으면, 기본 유형이 제공된다.<br>
  `spec.resources.requests.storageClassName` 필드가 없으면 기본 유형이 쓰인다.

### 스토리지 유형 종류
- `provisioner`
  - 영구볼륨이 필요해질 때 영구볼륨을 만드는 주체. 플랫폼에 따라 관리 주체가 달라진다.<br>
    예를 들어 기본 상태의 AKS는 함께 통합된 애저 파일스가 스토리지를 만든다.
- `reclaimPolicy`
  - 연결되었던 클레임이 삭제되었을 때 남아 있는 볼륨을 어떻게 처리할지 지정한다.
  - 볼륨을 함께 삭제할 수 있고, 남겨둘 수도 있다.
- `volumeBindingMode`
  - 영구볼륨클레임이 생성된 즉시 바로 영구볼륨을 생성해 연결할지,<br>
    아니면 해당 클레임을 사용하는 파드가 생성될 때 영구볼륨을 생성할지 선택할 수 있다.

### 동적 영구볼륨클레임 사용법
```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc-dynamic
  namespace: test
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
  ```

---

### 참고 도서
쿠버네티스 교과서 - 엘튼 스톤맨 지음