# 네트워크를 통해 서비스에 파드 연결하기

## 서비스 (Service)
- 파드에서 들고나는 통신 트래픽의 라우팅을 맡는 유연한 리소스다.
- 서비스의 cluster-ip 는 클러스터 어디에서든 접근 가능하다.
- 어드레스 디스커버리 (address discovery)
  - 쿠버네티스는 표준 네트워크 프로토콜 TCP와 UDP 지원하며<br>
    이 두 프로토콜은 모두 IP 주소로 트래픽을 제어하지만,<br>
    IP 주소는 파드를 대체할 때 주소가 변경되는 문제가 있다.<br>
    하지만 해당 기능으로 문제를 해결할 수 있다.

### 서비스(Service) 유형 - 클러스터IP(ClusterIP)
- 클러스터IP는 클러스터 전체에서 통용되는 IP 주소를 생성하고,<br>
  해당 IP 주소는 파드가 어느 노드에 있더라도 접근 가능하다.<br>
  하지만 이 IP 주소는 **클러스터 내에서만 유효**하다.<br>
  즉, 클러스터IP는 **파드와 파드 간 통신에서만** 쓰인다.

### 서비스(Service) 유형 - 로드밸런서(LoadBalancer)
- 트래픽을 받은 노드가 아닌, **노드에서 실행되는 파드에도 트래픽 전달**이 가능하다.
- 로드밸런서 서비스는 클러스터로 트래픽을 전달해 주는 외부 로드밸런서와 함께 동작하고,<br>
  레이블 셀렉터와 일치하는 파드로 트래픽을 전달한다.
- 로드밸런서 서비스의 커버 범위는 클러스터 전체다.<br>
  어느 노드에 있는 파드라도 트래픽을 전달받을 수 있다.<br>
  대상 파드가 요청받은 노드(워커노드)에 있지 않더라도 쿠버네티스가 올바른 노드까지 이 트래픽을 전달한다.

### 서비스(Service) 유형 - 노드포트(NodePort)
- 외부에서 클러스터로 들어오는 트래픽을 파드로 전달하는 서비스 리소스 유형 중 하나이다.
- 노드포트 서비스는 외부 로드밸런서가 필요 없다.<br>
  외부 로드밸런서가 없으므로, 트래픽이 곧바로 클러스터 노드로 인입된다.
- 클러스터를 구성하는 모든 노드가 이 서비스에 지정된 포트를 주시하며 들어온 트래픽을 대상 파드의 대상 포트로 전달한다.
- 노드포트 서비스는 서비스에서 설정된 포트가 모든 노드에서 개방되어 있어야 하여 로드밸런서 서비스만큼 유연하지 않다.
- 다중 노드 클러스터에서 로드밸런싱 효과를 얻을 수 없다는 것도 단점이다.
- 지원하는 분산 수준도 로드밸런서와 차이가 있다.

## 익스터널 네임(External Name)
- 쿠버네티스와 통합되지 않은 시스템과 연동할 때 **익스터널 네임**을 사용할 수 있다.
- 익스터널 네임 서비스는 애플리케이션 파드에서 로컬 네임을 사용하고,<br>
  쿠버네티스 DNS 서버에 이 로컬 네임을 조회하면 외부 도메인으로 해소(리턴)해 주는 방식이다.
- 아래 방법으로 익스터널 네임 서비스가 구현된 것을 확인할 수 있다.<br>
  ```shell
  kubectl exec -it [pod-name] sh
  
  # 해당 파드에 접속하여 아래 명령어 추가 입력
  nslookup [익스터널 네임 서비스명] | tail -n 5
  
  # output
  Name:   raw.githubusercontent.com
  Address: 185.199.108.133
  ```

### 서비스(Service) 형태 - 헤드리스 서비스(Headless Service)
- 클러스터IP 형태로 정의되지만, 레이블 셀렉터가 없어 대상 파드가 없다.
- 헤드리스 서비스는 자신이 제공해야 할 IP 주소의 목록이 담긴 엔드포인트 리소스와 함께 배포한다.

---

## 쿠버네티스 DNS 서버
- 해당 서버가 서비스 이름과 IP 주소를 대응시켜 파드의 생애주기로 인하여 IP가 바뀌어도 통신할 수 있다.
- 파드는 도메인 네임을 통해 통신하며, DNS 조회는 클러스터에 존재하는 쿠버네티스 DNS 서버에서 처리된다.<br>
  이 DNS 서버가 서비스의 IP 주소를 반환한다.
- 서비스가 생성되면 서비스의 IP 주소가 클러스터 내 DNS 서버에 등록된다.<br>
  - 이 IP 주소는 정적 주소로 서비스가 삭제될 때까지 변경되지 않는다.

## 네트워크 프록시
- 파드에서 나온 모든 통신을 **네트워크 프록시가 라우팅을 담당**한다.
- **각각의 노드**에서 동작하고 **모든 서비스의 엔드포인트에 대한 최신 정보**를 유지한다.
- 운영체제가 제공하는 **네트워크 패킷 필터**(리눅스는 IPVS 또는 iptables)를 사용해 트래픽을 라우팅한다.
- 클러스터IP는 가상 IP 주소로, 파드는 각 노드마다 동작하는 네트워크 프록시를 경유하여 네트워크에 접근한다.<br>
  그리고 패킷 필터링을 적용하여 가상 IP 주소를 실제 엔드포인트로 연결한다.<br>
  서비스에도 컨트롤러가 있어 파드가 변경될 때마다 엔드포인트의 목록을 최신으로 업데이트 한다.

## 네임스페이스(namespace)
- 모든 쿠버네티스 리소스는 네임스페이스 안에 존재한다.
- 쿠버네티스 클러스터를 논리적 파티션으로 나누는 역할을 한다.
- 네임스페이스 안에서는 도메인 네임을 이용하여 서비스에 접근한다.
- 다른 네임스페이스에 속하는 파드는 `numbers-api.default.svc.cluster.local`이라는 도메인 네임으로 접근할 수 있다.

---
## 다양한 사용법

### 파드의 IP 주소 및 많은 정보 확인
```shell
# -o wide : 보기 옵션에 wide 를 붙여서 더 많이 볼 수 있다.
kubectl get pod -o wide

# output
NAME                              READY   STATUS    RESTARTS   AGE     IP            NODE       NOMINATED NODE   READINESS GATES
sleep-1-deploy-5b88cbd4bf-rtx4h   1/1     Running   0          7m49s   10.0.0.60     minikube   <none>           <none>
sleep-2-deploy-7f69798f94-9l2ph   1/1     Running   0          7m49s   10.0.0.61     minikube   <none>           <none>
```

### 파드 내부로 접속하기
```shell
# 접속 후 종료는 exit 명령어 입력을 통해 나올 수 있다.
kubectl exec -it [pod-name] sh
```

### 서비스의 엔드포인트 목록 조회하기
```shell
kubectl get endpoints
```