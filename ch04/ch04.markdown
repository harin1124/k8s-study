# 컨피그맵과 비밀값으로 애플리케이션 설정하기

## 컨피그맵과 비밀값
- 쿠버네티스에서 컨테이너에 <span style="color:#DF5452">**설정값 주입**</span>에 쓰이는 리소스이다.
- 포맷 제한 없이 데이터를 보유할 수 있다.
- 클러스터 속에서 다른 리소스와 <span style="color:#DF5452">**독립적인 장소에 보관**</span>된다.
- 스스로 어떤 기능을 하지 않고, 데이터를 저장하는 것이 목적이다.

## 컨피그맵(ConfigMap)
- 파드에서 읽어 들이는 <span style="color:#DF5452">**데이터를 저장하는 리소스**</span>다.
- 데이터 형태는 키-값 쌍, 텍스트, 바이너리 파일 등 다양하다.
- 파드 하나에 여러 컨피그맵을 전달할 수 있고, 하나의 컨피그맵을 여러 파드에 전달할 수도 있다.
- 특정 애플리케이션 전용으로 사용하거나, 여러 파드에서 공유하는 형태로도 이용 가능하다.
- 컨피그맵은 <span style="color:#DF5452">**읽기 전용**</span>으로, 파드에서 컨피그맵 내용은 수정할 수 없다.
- 컨피그맵과 환경변수에 동일한 값이 있을 경우 `envFrom` 보다 `env` 값이 <span style="color:#DF5452">**우선시**</span> 된다.

### 컨피그맵 사용법
- 파드 정의 시에 사용할 수 있다.
  ```yaml
  apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: sleep
    namespace: test
  spec:
    selector:
      matchLabels:
        app: sleep
    template:
      metadata:
        labels:
          app: sleep
      spec:
        containers:
          - name: sleep
            image: kiamol/ch03-sleep
            # 환경변수
            env:
              - name: KIAMOL_CHAPTER
                value: "04"
              - name: KIAMOL_SECTION
                valueFrom:
                  # 환경변수 내에서도 컨피그맵을 불러들일 수 있다.
                  configMapKeyRef:
                    name: sleep-config-literal # 컨피그맵 명
                    key: kiamol.section        # 컨피그맵 내 항목명(key)
            # 컨피그맵
            envFrom:
              - configMapRef:
                  name: sleep-config-env-file
  ```

---

## 비밀값(Secret)
- 민감한 정보를 다루므로 <span style="color:#DF5452">**클러스터 내부에서 별도로 관리**</span>되는 리소스이다.
- 해당 값을 사용해야 하는 <span style="color:#DF5452">**노드에만 전달**</span>되고, 노드에서도 디스크에 저장하지 않고 <span style="color:#DF5452">**메모리**</span>에만 담긴다.<br>
  전달 과정과 저장할 때 모두 <span style="color:#DF5452">**암호화**</span> 한다.
- 암호화한 값은 비밀값 객체에 접근 권한이 있다면 평문을 읽을 수 있고,<br>
  평문은 Base64로 인코딩된 상태이므로 평문이 노출되는 일을 막아준다.

### 비밀값을 적용할 때 주의할 점
- **[문제]** 비밀값의 데이터를 환경 변수로 가져오는 경우
  - 환경 변수는 컨테이너에서 동작하는 모든 프로세스에서 접근이 가능하고,<br>
    애플리케이션 플랫폼에서 치명적 오류 발생 시 간혹 모든 환경 변수를 로그로 남기는 경우가 있다. (비밀값 노출 주의)<br>
    이러한 경우에는 <span style="color:#DF5452">**비밀값을 파일 형태로 전달**</span>하는 것이 필요하다.
  - 아래와 같은 yaml 로 값을 전달할 경우, 파드에 접근하여 `printenv KIAMOL_SECRET`를 입력하면 확인이 가능하다.
  ```yaml
  apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: sleep
    namespace: test
  spec:
    selector:
      matchLabels:
        app: sleep
    template:
      metadata:
        labels:
          app: sleep
      spec:
        containers:
          - name: sleep
            image: kiamol/ch03-sleep
            env:
              - name: KIAMOL_SECRET
                valueFrom:
                  secretKeyRef:
                    name: sleep-secret-literal
                    key: secret
  ```
- **[해결책]** 비밀값 객체 yaml 작성
  - 아래와 같이 비밀값을 생성하면 stringData 항목이 Base64로 인코딩되어 저장된다.
  - 일관적인 애플리케이션 배치가 가능하지만, 민감한 데이터가 **형상 관리 도구에 노출**되는 문제를 가지고 있다.
  - 실제 서비스 운영에서는 민감한 데이터가 들어갈 자리르 표시해두고,<br>애플리케이션 배치할 때 추가적인 처리를 거치는 방법을 처리한다.
  ```yaml
  apiVersion: v1
  kind: Secret
  metadata:
    name: todo-db-secret-test
    namespace: test
  type: Opaque
  stringData:
    POSTGRES_PASSWORD: "kiamol-2*2*"
  ```
---

## 환경변수
- 환경 변수는 파드의 생애 주기 내내 변하지 않는다.<br>
  즉, 파드가 실행되는 중에는 환경 변수의 값을 수정할 수 없다.
- 설정값 변경을 하려면 파드의 정의를 수정하고, 파드를 수정된 버전으로 대체해야 한다.

---

## 컨테이너 파일 시스템
- <span style="color:#DF5452">**컨테이너 이미지**</span>와 그 외 출처에서 온 <span style="color:#DF5452">**파일**</span>로 구성되는 <span style="color:#DF5452">**가상 구조**</span>다.
- 컨테이너 파일 시스템 구성에 컨피그맵을 추가 할 수 있고,<br>
  컨피그맵은 <span style="color:#DF5452">**디렉터리, 각 항목은 파일 형태**</span>로 컨테이너 파일 시스템에 추가된다.

### 컨테이너 파일 시스템 속 파일로 설정값 주입 (볼륨 마운트 형태 이용)
```yaml
# todo-web-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: todo-web-config-dev
  namespace: test
data:
  config.json: |-
    {
      "test": 123,
      "list": ["a", "b", "c"]
    }
```

```yaml
# todo-web-dev.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: todo-web
  namespace: test
spec:
  selector:
    matchLabels:
      app: todo-web
  template:
    metadata:
      labels:
        app: todo-web
    spec:
      containers:
        - name: web
          image: kiamol/ch04-todo-list
          # 2. 해당 컨테이너에 볼륨을 마운트 한다.
          volumeMounts:
            - name: todo-custom-config-volume # 2.1 마운트하는 볼륨의 명을 기재한다. (1.1에서의 볼륨 명칭)
              mountPath: "/app/config"        # 2.2 마운트되는 경로를 지정한다. (파일의 경우 해당 경로에 파일이 위치하게 된다.)
              readOnly: true                  # 2.3 볼륨을 읽기 전용으로 할지에 대한 여부를 지정한다.
      # 1. 먼저 볼륨을 생성한다.
      volumes:
        - name: todo-custom-config-volume # 1.1 볼륨의 명칭을 지정한다.
          configMap:                      # 1.2 볼륨의 원본은 configMap 임을 지정한다.
            name: todo-web-config-dev     # 1.3 configMap 이름을 기재한다.
```

---

## 다양한 사용법

### 파드에 환경 변수 사용
- 선언
  ```yaml
  apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: sleep
  spec:
    selector:
      matchLabels:
        app: sleep
    template:
      metadata:
        labels:
          app: sleep
      spec:
        containers:
          - name: sleep
            image: kiamol/ch03-sleep
            # 환경 변수 정의
            env:
              - name: KIAMOL_CHAPTER # 환경변수 이름
                value: "04"          # 환경변수 값
  ```
- 환경변수 적용 확인
  ```shell
  # 파드 내부에 접속
  kubectl exec -it deploy/[deploy-name] sh
  
  # printenv 명령어로 확인 (HOSTNAME은 기본 환경 변수다.)
  printenv HOSTNAME KIAMOL_CHAPTER
  ```

---

### 참고 도서
쿠버네티스 교과서 - 엘튼 스톤맨 지음